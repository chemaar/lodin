#!/usr/bin/python
# -*- coding: utf-8 -*-
__version__ = "1.0"
__authors__ = "Jose Mar√≠a Alvarez"
__license__ = "MIT License <http://www.opensource.org/licenses/mit-license.php>"
__contact__ = "chema.ar@gmail.com"
__date__    = "2013-01-22"

import os
import sys
import time
import re
import urllib
from string import Template
import sparql
import getopt
def listIndicators(graph,primary=True):
	indicators = []
	typeIndicator = "wi-onto:PrimaryIndicator" if primary else "wi-onto:SecondaryIndicator" 
	q = Template('SELECT DISTINCT ?label \n FROM <$graph> WHERE{ ?indicator rdf:type ?typeIndicator.\n\
			  ?indicator rdfs:label ?label. \n\
			  FILTER(?typeIndicator=$typeIndicator).  \n}') 	
	query = q.substitute(graph=graph, typeIndicator=typeIndicator)
	result = sparql.query(endpoint, query)
	for row in result:
		values = sparql.unpack_row(row)
		indicators.append(values[0])
	return indicators

def listCountries(graph):
	countries = []
	q = Template('SELECT ?countryLabel ?id ?lat ?long \n FROM <$graph> WHERE { ?country rdf:type wi-onto:Country.\n\
			  ?country rdfs:label ?countryLabel. \n\
			   FILTER (lang(?countryLabel) = \'en\') . \n\
  		          ?country wi-onto:has-iso-alpha2-code ?id. \n\
			  ?country geo:lat ?lat. \n\
			  ?country geo:long ?long. \n}') 	
	query = q.substitute(graph=graph)
	result = sparql.query(endpoint, query)
	for row in result:
		values = sparql.unpack_row(row)
		countries.append(values)
	return countries


def run(template, endpoint, graph, outputdir):
 	try:
		template = unicode(template)
	except UnicodeDecodeError, e:
		template = unicode(template.decode('utf-8'))
	#List indicators
	primaryIndicators = listIndicators(graph)
	secondaryIndicators = listIndicators(graph, False)
	#List countries
	countries = listCountries(graph)
	try:
        	template = template % (unicode("hola"), unicode("adis"))
        	template += "<!-- specification regenerated by SpecGen5 at %s -->" % time.strftime('%X %x %Z')
	except TypeError, e:
        	print "Error filling the template! Please, be sure you respected both '%s' on your template" % "%s"
    
	return template

def save(path, text):
    try:
        f = open(path, "w")
        f.write(text.encode("utf-8"))
        f.flush()
        f.close()
    except Exception, e:
        print "Error writting in file %s: %s" % (path, e)


#Based on: https://bitbucket.org/wikier/specgen/src/35aba3595cd83f31382a34db65717237d8cfadd0/specgen.py?at=default
def __getScriptPath():
    path = sys.argv[0]
    if path.startswith("./"):
        return path
    else:
        base = "/".join(path.split("/")[:-1])
        for one in os.environ["PATH"].split(":"):
            if base == one:
                return path.split("/")[-1]
        return path

def usage():
    script = __getScriptPath()
    print """Usage: 
    %s template endpoint output-dir

        template    : DSPL template
        endpoint : SPARQL URL endpoint
	graph: URI of the named graph containing statistics
	output-dir: Dir to write generated files

examples:
    %s template.xml http://data.webfoundation.org/sparql http://data.webfoundation.org/webindex/ wi

""" % (script, script)
    sys.exit(-1)

if __name__ == "__main__":
    """Webindex DSPL generator tool"""
    
    args = sys.argv[1:]
    if (len(args) < 4):
        usage()
    else:
        
        #template
        temploc = args[0]
        template = None
        try:
            f = open(temploc, "r")
            template = f.read()
        except Exception, e:
            print "Error reading from template \"" + temploc + "\": " + str(e)
            usage()

        #SPARQL endpoint
        endpoint = args[1]

	#Named graph
        graph = args[2]

 	#Output dir
	outputdir = args[3]
        
	run(template, endpoint, graph, outputdir)


